olve a problem like this, we can think of each node as implementing a decision procedure (using a method, like .is_item_present(query)). The LinkedList interface object would return False if its self.first_n is None (to indicate the list is empty, so the query item can’t be present). If its self.first_n is not None, it calls self.first_n.is_item_present(query), expecting that node to either return True or False.

For a node, the decision procedure is only slightly more complex:

Check whether self.item is equal to the query. If so, a True can safely be returned.
Otherwise:

If self.next_n is None, then False can be returned, because if the buck got passed to the end of the list, no node has matched the query.
If self.next_n does exist, on the other hand, just pass the buck down the line, and rely on the answer to come back, which can be returned.




Here is a quick demonstration of the usage (the whole script can be found in the file linkedlist.py):

Notice the similarity in all of these methods: each node first determines whether it can answer the problem—if so, it computes and returns the answer. If not, it checks for a node to pass the problem on to, and if one exists, the buck is passed. Notice that at each buck pass the method being called is the same—it’s just being called for a different object. And each time the overall “problem” gets smaller as the number of nodes left to pass the buck to decreases.
How much time does it take to insert an item into a list that is al