ction (for concatenate), which takes as parameters the elements to put into the vector:

The c() function can take other vectors as parameters, too—it will “deconstruct” all subvectors and return one large vector, rather than a vector of vectors.

We can extract individual elements from a vector using [] syntax; though note that, unlike many other languages, the first element is at index 1.

The length() function returns the number of elements of a vector (or similar types, like lists, which we’ll cover later) as an integer:

We can use this to extract the last element of a vector, for example.

No “Naked Data”: Vectors Have (a) Class
So far in our discussion of R’s data types, we’ve been making a simplification, or at least we’ve been leaving something out. Even individual values like the numeric 4.6 are actually vectors of length one. Which is to say, gc_content <- 0.34 is equivalent to gc_content <- c(0.34), and in both cases, length(gc_content) will return 1, which itself is a vector of length one. This applies to numerics, integers, logicals, and character types. Thus, at least compared to other languages, R has no “naked data”; the vector is the most basic unit of data that R has. This is slightly more confusing for character types than others, as each individual element is a string of characters of any length (including potentially the “empty” string "").