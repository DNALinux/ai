$ windowmasker -in hs_chr.fa -infmt fasta -mk_counts \
  -parse_seqids -out hs_chr_mask.counts
With the counts file we can then proceed to create the file containing the masking information as follows:
$ windowmasker -in hs_chr -infmt blastdb -ustat hs_chr_mask.count \
  -outfmt maskinfo_asn1_bin -parse_seqids -out hs_chr_mask.asnb
Here we need to use the same input (-in hs_chr -infmt blastdb) and the output of step 1 (-ustat 
hs_chr_mask.counts). We set the mask file format to binary asn.1 (-outfmt maskinfo_asn1_bin), enable the 
sequence ids parsing (-parse_seqids), and save the masking data to hs_chr_mask.asnb (-out hs_chr_mask.asnb).
To use the FASTA file hs_chr.fa, we change the input file name and file type:
$ windowmasker -in hs_chr.fa -infmt fasta -ustat hs_chr.counts \
  -outfmt maskinfo_asn1_bin -parse_seqids -out hs_chr_mask.asnb
Create masking information using segmasker
We can generate the masking information with segmasker using a single command line:
$ segmasker -in refseq_protein -infmt blastdb -parse_seqids \
  -outfmt maskinfo_asn1_bin -out refseq_seg.asnb
Here we specify the refseq_protein BLAST database (-in refseq_protein -infmt blastdb), enable sequence ids 
parsing (-parse_seqids), request the mask data in binary asn.1 format (-outfmt maskinfo_asn1_bin), and name 
the out file as refseq_seg.asnb (-out refseq_seg.asnb).
If the input format is the FASTA file, we need to change the command line to specify the input format:
$ segmasker -in refseq_protein.fa -infmt fasta -parse_seqids \
  -outfmt maskinfo_asn1_bin -out refseq_seg.asnb
Extract masking information from FASTA sequences with lowercase 
masking
We can also extract the masking information from a FASTA sequence file with lowercase masking (generated by 
various means) using convert2blastmask utility. An example command line follows:
$ convert2blastmask -in hs_chr.mfa -parse_seqids -masking_algorithm repeat \
 -masking_options "repeatmasker, default" -outfmt maskinfo_asn1_bin \
 -out hs_chr_mfa.asnb 
Here the input is hs_chr.mfa (-in hs_chr.mfa), enable parsing of sequence ids, specify the masking algorithm 
name (-masking_algorithm repeat) and its parameter (-masking_options “repeatmasker, default”), and ask for 
asn.1 output (-outfmt maskinfo_asn1_bin) to be saved in specified  file (-out hs_chr_mfa.asnb).
Create BLAST database with the masking information
Using the masking information data files generated in the previous 4 steps, we can create BLAST database with 
masking information incorporated.
Notes :
1.we should use “-parse_seqids” in a consistent manner – either use it in both steps or not use it at all.
2.Starting with the 2.10.0 release, makeblastdb produces version 5 databases by default, which uses LMDB. 
LMDB requires virtual memory (at least 600 GB, but 800 GB is recommended). Virtual memory is just 34 BLAST® Command Line Applications User Manual